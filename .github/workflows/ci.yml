name: CI

on:
  pull_request:
    branches: ["*"]
  push:
    branches: [master]

jobs:
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: test
    env:
      APP_ENV: test
      ACTIVEMQ_BROKER_URL: ${{ vars.ACTIVEMQ_BROKER_URL }}
      PORT: ${{ vars.PORT }}
      HOST: ${{ vars.HOST }}
      EMAIL_PORT: ${{ vars.EMAIL_PORT }}
      EMAIL_HOST: ${{ vars.EMAIL_HOST }}
      EMAIL_USER: ${{ vars.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_FROM: ${{ vars.EMAIL_FROM }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create docker network
        run: docker network create ci-network

      - name: Start Postgres
        run: |
          docker run -d --name postgres \
            --network ci-network \
            -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -p 5432:5432 \
            postgres:15

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            docker exec postgres pg_isready -U ${{ env.POSTGRES_USER }} && break
            sleep 1
          done

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Start Datomic Transactor container for SQL scripts
        run: |
          docker create --name datomic-transactor-init alexandrvirtual/datomic-transactor-test:1.0.7364
          docker cp datomic-transactor-init:/opt/datomic/datomic-pro-1.0.7364/bin/sql ./datomic-sql
          docker rm datomic-transactor-init

      - name: Init Datomic Postgres DB
        run: |
          psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f datomic-sql/postgres-db.sql
          psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f datomic-sql/postgres-table.sql
          psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f datomic-sql/postgres-user.sql
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: Start Datomic Transactor
        run: |
          docker run -d --name datomic-transactor \
            --network ci-network \
            -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -p 8998:8998 -p 8182:8182 \
            alexandrvirtual/datomic-transactor-test:1.0.7364

      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: 1.12.1.1550
          clj-kondo: 2022.05.31
          cljfmt: 0.10.2

      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Cache Maven local repo
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: m2-${{ hashFiles('lib/datomic-pro-1.0.7364/peer-1.0.7364.jar') }}
          restore-keys: m2-

      - name: Download Datomic Pro
        run: |
          mkdir -p lib
          curl -L "https://datomic-pro-downloads.s3.amazonaws.com/1.0.7364/datomic-pro-1.0.7364.zip" -o lib/datomic-pro-1.0.7364.zip
          unzip lib/datomic-pro-1.0.7364.zip -d lib
          rm lib/datomic-pro-1.0.7364.zip

      - name: Manually install Datomic Pro jar
        run: |
          mvn install:install-file \
            -Dfile=lib/datomic-pro-1.0.7364/peer-1.0.7364.jar \
            -DpomFile=lib/datomic-pro-1.0.7364/pom.xml \
            -DgroupId=com.datomic \
            -DartifactId=datomic-pro \
            -Dversion=1.0.7364 \
            -Dpackaging=jar

      - name: Run clj-kondo lint
        run: clj-kondo --lint src test

      - name: Run cljfmt check
        run: cljfmt check

      - name: Run tests
        run: clojure -T:build test

      - name: Build test Docker image
        run: docker build -t my-app:test .

  build-prod:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: []
    environment: prod
    permissions:
      contents: read
      packages: write
    env:
      APP_ENV: prod
      ACTIVEMQ_BROKER_URL: ${{ vars.ACTIVEMQ_BROKER_URL }}
      PORT: ${{ vars.PORT }}
      HOST: ${{ vars.HOST }}
      EMAIL_PORT: ${{ vars.EMAIL_PORT }}
      EMAIL_HOST: ${{ vars.EMAIL_HOST }}
      EMAIL_USER: ${{ vars.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_FROM: ${{ vars.EMAIL_FROM }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: 1.12.1.1550
          clj-kondo: 2022.05.31
          cljfmt: 0.10.2

      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Cache Maven local repo
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: m2-${{ hashFiles('lib/datomic-pro-1.0.7364/peer-1.0.7364.jar') }}
          restore-keys: m2-

      - name: Download Datomic Pro
        run: |
          mkdir -p lib
          curl -L "https://datomic-pro-downloads.s3.amazonaws.com/1.0.7364/datomic-pro-1.0.7364.zip" -o lib/datomic-pro-1.0.7364.zip
          unzip lib/datomic-pro-1.0.7364.zip -d lib
          rm lib/datomic-pro-1.0.7364.zip

      - name: Manually install Datomic Pro jar
        run: |
          mvn install:install-file \
            -Dfile=lib/datomic-pro-1.0.7364/peer-1.0.7364.jar \
            -DpomFile=lib/datomic-pro-1.0.7364/pom.xml \
            -DgroupId=com.datomic \
            -DartifactId=datomic-pro \
            -Dversion=1.0.7364 \
            -Dpackaging=jar

      - name: Build and push Docker image
        run: |
          IMAGE_REPO_LOWER=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="${{ github.sha }}"
          docker build --no-cache -t "${IMAGE_REPO_LOWER}:${IMAGE_TAG}" .
          docker push "${IMAGE_REPO_LOWER}:${IMAGE_TAG}"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            IMAGE_REPO_LOWER=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG="${{ github.sha }}"
            IMAGE_NAME="${IMAGE_REPO_LOWER}:${IMAGE_TAG}"
            CONTAINER_NAME="marketplace-shum-app"
            echo "--- Pulling new image: $IMAGE_NAME ---"
            docker pull $IMAGE_NAME
            echo "--- Stopping and removing app container before migrations (if running) ---"
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
                docker rm -f $CONTAINER_NAME || true
            fi
            echo "--- Deploying new application container ---"
            docker run --env-file=.env -d \
              --network shum-net \
              --name "$CONTAINER_NAME" -m 300m \
              -e 'JAVA_OPTS=-Xmx200m -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -Ddatomic.objectCacheMax=32m -Ddatomic.memoryIndexMax=64m' \
              --restart always \
              -p 8032:4000 \
              "$IMAGE_NAME"
