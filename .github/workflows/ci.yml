name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: ["*"]

jobs:
  build:
    environment: test
    runs-on: ubuntu-latest

    env:
      ACTIVEMQ_BROKER_URL: tcp://activemq:61616
      APP_ENV: ${{ vars.APP_ENV }}
      PORT: ${{ vars.PORT }}
      HOST: ${{ vars.HOST }}
      EMAIL_PORT: ${{ vars.EMAIL_PORT }}
      EMAIL_HOST: ${{ vars.EMAIL_HOST }}
      EMAIL_USER: ${{ vars.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_FROM: ${{ vars.EMAIL_FROM }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ vars.POSTGRES_USER }}"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: 1.12.1.1550
          clj-kondo: 2022.05.31
          cljfmt: 0.10.2

      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -U ${{ vars.POSTGRES_USER }} && break
            sleep 1
          done

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Start Datomic Transactor container for SQL scripts
        run: |
          docker create --name datomic-transactor-init alexandrvirtual/datomic-transactor-test:1.0.7364
          docker cp datomic-transactor-init:/opt/datomic/datomic-pro-1.0.7364/bin/sql ./datomic-sql
          docker rm datomic-transactor-init

      - name: Init Datomic Postgres DB
        run: |
          psql -h localhost -U ${{ vars.POSTGRES_USER }} -d ${{ vars.POSTGRES_DB }} -f datomic-sql/postgres-db.sql
          psql -h localhost -U ${{ vars.POSTGRES_USER }} -d ${{ vars.POSTGRES_DB }} -f datomic-sql/postgres-table.sql
          psql -h localhost -U ${{ vars.POSTGRES_USER }} -d ${{ vars.POSTGRES_DB }} -f datomic-sql/postgres-user.sql
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Start Datomic Transactor
        run: |
          docker run -d --name datomic-transactor \
            -e POSTGRES_DB=${{ vars.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ vars.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -p 8998:8998 -p 8182:8182 \
            alexandrvirtual/datomic-transactor-test:1.0.7364

      - name: Run test DB migrations
        run: clojure -X:migrate

      - name: Run clj-kondo lint
        run: clj-kondo --lint src test

      - name: Run cljfmt check
        run: cljfmt check

      - name: Print APP_ENV
        run: echo $APP_ENV

      - name: List config files
        run: ls -l config

      - name: Run tests
        run: clojure -T:build test
